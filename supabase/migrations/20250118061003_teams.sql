-- 팀 테이블
CREATE TABLE teams (
  id bigint generated by DEFAULT AS identity PRIMARY KEY,
  name text NOT NULL CHECK (char_length(name) > 2),
  owner_id uuid NOT NULL REFERENCES auth.users (id),
  created_at timestamp WITH time zone DEFAULT timezone('utc' :: text, NOW()) NOT NULL
);

-- 팀 멤버 테이블
CREATE TABLE team_members (
  id bigint generated by DEFAULT AS identity PRIMARY KEY,
  team_id bigint NOT NULL REFERENCES teams (id),
  user_id uuid NOT NULL REFERENCES auth.users (id),
  role text CHECK (role IN ('admin', 'member')),
  created_at timestamp WITH time zone DEFAULT timezone('utc' :: text, NOW()) NOT NULL,
  UNIQUE (team_id, user_id)
);

-- todos 테이블에 team 연관 추가
ALTER TABLE
  todos
ADD
  COLUMN team_id bigint REFERENCES teams (id);

-- teams 테이블에 RLS 설정
ALTER TABLE
  teams ENABLE ROW LEVEL SECURITY;

-- RLS: 사용자는 팀을 생성할 수 있다.
CREATE POLICY "User can create teams." ON teams FOR
INSERT
  WITH CHECK (auth.uid() = owner_id);

-- RLS: 팀 구성원은 팀원들을 볼 수 있다.
CREATE POLICY "Team members can view their teams." ON teams FOR
SELECT
  USING (
    EXISTS (
      SELECT
        1
      FROM
        team_members
      WHERE
        team_members.team_id = teams.id
        AND team_members.user_id = auth.uid()
    )
  );

-- RLS: owner만 팀을 수정할 수 있다.
CREATE POLICY "Only owner can update teams." ON teams FOR
UPDATE
  USING (auth.uid() = owner_id);

-- RLS: owner만 팀을 삭제할 수 있다.
CREATE POLICY "Only owner can delete teams." ON teams FOR DELETE USING (auth.uid() = owner_id);

-- team_members 테이블에 RLS 설정
ALTER TABLE
  team_members ENABLE ROW LEVEL SECURITY;

-- RLS: 팀 owner는 팀원을 추가할 수 있다.
CREATE POLICY "Team owner can add members." ON team_members FOR
INSERT
  WITH CHECK (
    EXISTS (
      SELECT
        1
      FROM
        teams
      WHERE
        teams.id = team_id
        AND teams.owner_id = auth.uid()
    )
  );

-- RLS: 팀 구성원은 다른 구성원을 볼 수 있다.
CREATE POLICY "Team members can view other members." ON team_members FOR
SELECT
  USING (
    EXISTS (
      SELECT
        1
      FROM
        team_members
      WHERE
        team_members.team_id = team_members.team_id
        AND team_members.user_id = auth.uid()
    )
  );

-- RLS: owner만 팀원을 삭제할 수 있다.
CREATE POLICY "Only owner can delete members." ON team_members FOR DELETE USING (
  EXISTS (
    SELECT
      1
    FROM
      teams
    WHERE
      teams.id = team_id
      AND teams.owner_id = auth.uid()
  )
);

-- RLS: 팀 구성원은 팀의 todo를 확인할 수 있다.
CREATE POLICY "Team members can view team todos." ON todos FOR
SELECT
  USING (
    auth.uid() = user_id
    OR (
      team_id IS NOT NULL
      AND EXISTS (
        SELECT
          1
        FROM
          team_members
        WHERE
          team_members.team_id = todos.team_id
          AND team_members.user_id = auth.uid()
      )
    )
  );

-- RLS: 팀 구성원은 todo를 추가할 수 있다.
CREATE POLICY "Team members can add todos." ON todos FOR
INSERT
  WITH CHECK (
    auth.uid() = user_id
    AND (
      team_id IS NULL
      OR EXISTS (
        SELECT
          1
        FROM
          team_members
        WHERE
          team_members.team_id = todos.team_id
          AND team_members.user_id = auth.uid()
      )
    )
  )